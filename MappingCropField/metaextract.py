"""
EXIF GPS Metadata Extraction

This module provides functionality to extract GPS metadata 
from image files using the `exifread` library.

Generated by ChatGPT

Key Functionality:
------------------
- Extracts GPS metadata such as latitude, longitude, altitude, 
  image direction, and date taken from image files.
- Converts EXIF GPS coordinates to decimal degrees.
- Handles exceptions and returns structured metadata even for invalid or incomplete EXIF data.

Dependencies:
-------------
- exifread: For reading EXIF metadata from image files.

Functions:
----------
- get_gps_metadata_from_file(file_path):
    Extracts and processes GPS-related metadata from a given image file.
"""
import exifread

def get_gps_metadata_from_file(file_path):
    """
    Extract GPS metadata from an image file using exifread.
    
    Args:
        file_path (str): Path to the image file.
        
    Returns:
        dict: Dictionary containing GPS metadata.
    """
    metadata = {}

    # Helper function to extract rational values as float
    def extract_ratio(value):
        if isinstance(value.values, list):
            return [v.num / v.den if v.den != 0 else 0 for v in value.values]
        elif hasattr(value, 'num') and hasattr(value, 'den'):
            return value.num / value.den if value.den != 0 else 0
        return None

    # Helper function to convert EXIF GPS coordinates to decimal
    def convert_to_decimal(coord, ref):
        if coord:
            values = extract_ratio(coord)
            if len(values) == 3:  # Expecting [degrees, minutes, seconds]
                decimal = values[0] + (values[1] / 60.0) + (values[2] / 3600.0)
                if ref in ['S', 'W']:
                    decimal = -decimal
                return decimal
        return None

    try:
        with open(file_path, 'rb') as f:
            tags = exifread.process_file(f)

            # Extract Latitude and Longitude
            lat_ref = tags.get('GPS GPSLatitudeRef', None)
            lat = tags.get('GPS GPSLatitude')
            latitude = convert_to_decimal(lat, lat_ref.values if lat_ref else None)

            lon_ref = tags.get('GPS GPSLongitudeRef', None)
            lon = tags.get('GPS GPSLongitude')
            longitude = convert_to_decimal(lon, lon_ref.values if lon_ref else None)

            # Extract Altitude
            altitude = None
            if 'GPS GPSAltitude' in tags:
                altitude = extract_ratio(tags['GPS GPSAltitude'])

            # Extract Image Direction
            dir_ref = tags.get('GPS GPSImgDirectionRef', None)
            dir_ref = dir_ref.values if dir_ref else 'T'
            image_direction = None
            if 'GPS GPSImgDirection' in tags:
                image_direction = extract_ratio(tags['GPS GPSImgDirection'])

            # Extract Image Date Taken
            date_taken = tags.get('EXIF DateTimeOriginal')
            date_taken = date_taken.values if date_taken else None

            # Build Metadata Dictionary
            metadata = {
                "Latitude": latitude,
                "Longitude": longitude,
                "Altitude (meters)": altitude[0] if altitude else None,
                "Image Direction (degrees)": image_direction[0] if image_direction else None,
                "Direction Reference": "True North" if dir_ref == 'T' else "Magnetic North",
                "Date Taken": date_taken
            }
    except Exception as e:
        print(f"Error processing file {file_path}: {e}")
        metadata = {
            "Latitude": None,
            "Longitude": None,
            "Altitude (meters)": None,
            "Image Direction (degrees)": None,
            "Direction Reference": None,
            "Date Taken": None
        }

    return metadata
